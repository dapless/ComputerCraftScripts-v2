-- positioning system

--going to take care of all movement.

--[[
forward starts as f cord
right of forward is r coord
left of forward is l coord
--]]
forback=0--north pos south neg
leftright=0 --east is pos west neg
height=0
direction=1
--[[
1=north
2=east
3=south
4=west
--]]
function getDirection()
return direction
end

function getforback()
return forback
end

function getleftright()
return leftright
end

function getheight()
return height
end

function forward()
attempt=0


while turtle.detect() do
up()
if turtle.detectUp() then
break
end


if turtle.forward() then
	if direction==1 then--facing north
		forback=forback+1
		return true
	elseif direction==3 then--facing south
		forback=forback-1
		return true
	elseif direction==2 then --facing east
		leftright=leftright+1
		return true
	else 					--facing west
		leftright=leftright-1
		return true
	end
else--if it's out of fuel attempt to refuel
if refuel then
refuel()
end

return false
end
end
end

function refuel()
if turtle.getFuelLevel()==0 then
--only attempt to refuel if the turtle
--is out of fuel.
for i = 1, 16 do -- loop through the slots
  turtle.select(i) -- change to the slot
  if turtle.refuel(0) then -- if it's valid fuel
    turtle.refuel(64)
  end
end
end
end

function turnRight()
turtle.turnRight()
if direction<4 then
direction=direction+1
else direction=1
end
end

function facedirection(newdir)
while direction~=newdir do
turnRight()
end
end

function turnLeft()
turtle.turnLeft()
if direction>1 then
direction=direction-1
else direction=4
end
end

function fullDown()--go down until hit ground
while not turtle.detectDown() do
down()
end
end

function down(distance)
distance=distance or 1
for d=1,distance do
if turtle.down()then
height=height-1
return true
else

refuel()

print("can't procede down")
return false
--error()
end
end
end

function up()
if turtle.up()then
height=height+1
return true
else--the first attempt failed but maybe it was becuase it was out of fuel
	refuel()
	if turtle.up()then--try again after the turtle has been refueld.
		height=height+1
		return true
		end
print("can't procede up")--if turtle still can't procede then print error and return false.
return false
--error()
end

end

function goto(northsouth,eastwest,destheight)

destheight=destheight or height
--go to pos in northsouth
while forback<northsouth do
--face proper direction
while direction~=1 do
	turnRight()
end
forward()
end

--go to neg in north south
while forback>northsouth do
--face proper direction
while direction~=3 do
	turnRight()
end
forward()
end

--go to pos in east west
while leftright<eastwest do
--face proper direction
while direction~=2 do
	turnRight()
end
forward()
end

--go to neg in east west
while leftright>eastwest do
--face proper direction
while direction~=4 do
	turnRight()
end
forward()
end

--figure height

while height<destheight do
	if not up()then
	return false
	end
end

while height >destheight do
if not down() then
return false
end
end

end

function strafeNorth(distance,faceorigonal,avoid)
ogdir=direction
avoid=avoid or false
facedirection(1)
truth=forward(distance,avoid)
if faceorigonal then
facedirection(ogdir)
end
return truth
end

function strafeEast(distance,faceorigonal,avoid)
ogdir=direction
avoid=avoid or false--by defualt break blocks that are in the way
facedirection(2)
truth=forward(distance,avoid)
if faceorigonal then
facedirection(ogdir)
end
return truth
end

function strafeSouth(distance,faceorigonal,avoid)
ogdir=direction
avoid=avoid or false
facedirection(3)
truth=forward(distance,avoid)
if faceorigonal then
facedirection(ogdir)
end
return truth
end

function strafeWest(distance,faceorigonal,avoid)
ogdir=direction
avoid=avoid or false
facedirection(4)
truth=forward(distance,avoid)
if faceorigonal then
facedirection(ogdir)
end
return truth
end

function randomMove()
--make turtle move a random block in any direction.
thisway=math.random(4)
if thisway==1 then
	if strafeNorth(1,false,true) then
	return true
	else 
	return false
	end end
if thisway==2 then
	if strafeSouth(1,false,true) then
	return true
	else
	 return false
	end end
if thisway==3 then
	if strafeEast(1,false,true) then
	return true
	else
	 return false
	end end
if thisway==4 then
	if strafeWest(1,false,true) then
	return true
	else
	 return false
	end end
--[[if direction==5 then
	if up() then
	return true
	end end
if direction==6 then
	if down() then
	return true
	end end--]]

end
				
				
